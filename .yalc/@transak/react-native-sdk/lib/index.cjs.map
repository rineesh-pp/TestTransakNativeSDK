{"version":3,"sources":["../src/Constants/environments.ts","../src/Constants/events.ts","../src/TransakWebView.tsx","../src/Utils/generate-global-transak-url.ts","../src/Constants/web-app-urls.ts","../package.json","../src/Utils/event-listener.ts"],"names":["Environments","Events","useEffect","forwardRef","Alert","Linking","WebView","InAppBrowser","qs","pako","WebAppUrls","package_default","generateGlobalTransakUrl","configData","sdkName","sdkVersion","environment","queryParams","queryString","key","Pusher","eventListener","apiKey","partnerOrderId","cb","pusher","channelName","event","data","jsx","TransakWebView","transakConfig","onTransakEvent","webviewProps","ref","transakUrl","currentWebviewProps","openGooglePayUrl","url","error","onMessageHandler","unbindListener"],"mappings":"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","sourcesContent":["export enum Environments {\n  STAGING = 'STAGING',\n  PRODUCTION = 'PRODUCTION',\n}\n","export enum Events {\n  ORDER_CREATED = 'ORDER_CREATED',\n  ORDER_PAYMENT_VERIFYING = 'ORDER_PAYMENT_VERIFYING',\n  ORDER_PROCESSING = 'ORDER_PROCESSING',\n  ORDER_COMPLETED = 'ORDER_COMPLETED',\n  ORDER_FAILED = 'ORDER_FAILED',\n}\n","import { useEffect, forwardRef } from 'react';\nimport { Alert, Linking } from 'react-native';\nimport { WebView, WebViewMessageEvent } from 'react-native-webview';\nimport { InAppBrowser } from 'react-native-inappbrowser-reborn';\nimport { generateGlobalTransakUrl } from 'Utils/generate-global-transak-url';\nimport { eventListener } from 'Utils/event-listener';\nimport { TransakWebViewInputs } from 'Types/sdk-config.types';\n\nconst TransakWebView = forwardRef<WebView, TransakWebViewInputs>(({ transakConfig, onTransakEvent, ...webviewProps }, ref) => {\n  const transakUrl = generateGlobalTransakUrl(transakConfig);\n  const currentWebviewProps = { ...webviewProps };\n\n  delete currentWebviewProps.sharedCookiesEnabled;\n  delete currentWebviewProps.injectedJavaScript;\n  delete currentWebviewProps.injectedJavaScriptBeforeContentLoaded;\n  delete currentWebviewProps.onMessage;\n  delete currentWebviewProps.mediaPlaybackRequiresUserAction;\n\n  const openGooglePayUrl = async (url: string) => {\n    try {\n      if (await InAppBrowser.isAvailable()) {\n        await InAppBrowser.open(url, {\n          // Android Properties\n          showTitle: false,\n          toolbarColor: transakConfig.themeColor ? `#${transakConfig.themeColor}` : '#2575fc',\n          secondaryToolbarColor: '#ffffff',\n          enableUrlBarHiding: true,\n          enableDefaultShare: false,\n          forceCloseOnRedirection: false,\n          hasBackButton: false,\n          showInRecents: false,\n          // iOS Properties\n          dismissButtonStyle: 'done',\n          preferredBarTintColor: transakConfig.themeColor ? `#${transakConfig.themeColor}` : '#2575fc',\n          preferredControlTintColor: '#ffffff',\n          readerMode: false,\n          animated: true,\n          modalPresentationStyle: 'fullScreen',\n          modalTransitionStyle: 'coverVertical',\n          modalEnabled: true,\n          enableBarCollapsing: false,\n        });\n      } else {\n        await Linking.openURL(url);\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        Alert.alert(error.message);\n      }\n    }\n  };\n\n  const onMessageHandler = (event: WebViewMessageEvent) => {\n    if (webviewProps.onMessage) {\n      webviewProps.onMessage(event);\n    }\n\n    const url = event.nativeEvent.data;\n\n    if (url.includes('/googlepay')) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      openGooglePayUrl(url.replace('isWebView', 'useAsExternalPayment'));\n    }\n  };\n\n  useEffect(() => {\n    const { unbindListener } = eventListener(transakConfig, onTransakEvent);\n\n    return () => {\n      unbindListener();\n    };\n  }, []);\n\n  return (\n    <WebView\n      ref={ref}\n      {...currentWebviewProps}\n      originWhitelist={['*']}\n      source={{ uri: transakUrl }}\n      enableApplePay\n      allowsInlineMediaPlayback\n      mediaPlaybackRequiresUserAction={false}\n      onMessage={onMessageHandler}\n    />\n  );\n});\n\nexport { TransakWebView };\n","import qs from 'query-string';\nimport pako from 'pako';\nimport { WebAppUrls } from 'Constants/web-app-urls';\nimport { TransakConfig } from 'Types/sdk-config.types';\nimport { Environments } from 'Constants/environments';\nimport packageJson from 'package.json';\n\nexport function generateGlobalTransakUrl(configData: TransakConfig) {\n  const { name: sdkName, version: sdkVersion } = packageJson;\n  const { environment = Environments.STAGING } = configData;\n  const queryParams = { sdkName, sdkVersion };\n  let queryString = '';\n\n  (Object.keys(configData) as (keyof TransakConfig)[]).forEach((key) => {\n    if (['environment', 'widgetWidth', 'widgetHeight'].includes(key)) return;\n\n    if (['walletAddressesData', 'userData'].includes(key)) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        queryParams[key] = JSON.stringify(configData[key]);\n      } catch (e) {\n        /* empty */\n      }\n\n      return;\n    }\n\n    if (['nftData', 'sourceTokenData', 'cryptoCurrencyData', 'tokenData'].includes(key)) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        queryParams[key] = btoa(JSON.stringify(configData[key]));\n      } catch (e) {\n        /* empty */\n      }\n\n      return;\n    }\n\n    if (['calldata'].includes(key)) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        queryParams[key] = btoa(String.fromCharCode.apply(null, pako.deflate(configData[key])));\n      } catch (e) {\n        /* empty */\n      }\n\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    queryParams[key] = configData[key];\n  });\n\n  queryString = qs.stringify(queryParams, { arrayFormat: 'comma' });\n\n  return `${WebAppUrls[environment]}?${queryString}`;\n}\n","import { Environments } from './environments';\n\nexport const WebAppUrls = {\n  DEVELOPMENT: 'https://<enter-system-ip>:5005/',\n  DEV: 'https://global-dev.transak.com',\n  DEV_IFRAME: 'https://global-iframe-dev.transak.com',\n  BETA: 'https://global-beta.transak.com',\n  [Environments.STAGING]: 'https://global-stg.transak.com',\n  [Environments.PRODUCTION]: 'https://global.transak.com',\n};\n","{\n  \"name\": \"@transak/react-native-sdk\",\n  \"version\": \"2.0.6\",\n  \"description\": \"A React Native SDK for decentralised applications to onboard their global user base with fiat currency\",\n  \"type\": \"module\",\n  \"types\": \"lib/index.d.ts\",\n  \"main\": \"lib/index.cjs\",\n  \"exports\": {\n    \".\": {\n      \"import\": {\n        \"types\": \"./lib/index.d.ts\",\n        \"default\": \"./lib/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./lib/index.d.cts\",\n        \"default\": \"./lib/index.cjs\"\n      }\n    }\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"packageManager\": \"pnpm@9.5.0+sha512.140036830124618d624a2187b50d04289d5a087f326c9edfc0ccd733d76c4f52c3a313d4fc148794a2a9d81553016004e6742e8cf850670268a7387fc220c903\",\n  \"files\": [\n    \"lib/**/*\"\n  ],\n  \"scripts\": {\n    \"eslint\": \"eslint . --ext .ts,.tsx\",\n    \"eslint:fix\": \"pnpm eslint --fix\",\n    \"build\": \"tsc && tsup\",\n    \"prepack\": \"pnpm build\",\n    \"packDev\": \"pnpm pack\"\n  },\n  \"author\": \"Transak\",\n  \"license\": \"ISC\",\n  \"homepage\": \"https://docs.transak.com/docs/react-native-integration#transak-react-native-sdk\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Transak/react-native-sdk\"\n  },\n  \"peerDependencies\": {\n    \"@react-native-community/netinfo\": \"*\",\n    \"@types/react\": \"*\",\n    \"react\": \"*\",\n    \"react-native\": \"*\",\n    \"react-native-inappbrowser-reborn\": \"*\",\n    \"react-native-webview\": \"*\"\n  },\n  \"dependencies\": {\n    \"pako\": \"^2.1.0\",\n    \"pusher-js\": \"^8.3.0\",\n    \"query-string\": \"^8.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/pako\": \"^2.0.3\",\n    \"@types/react\": \"^18.2.57\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\n    \"eslint-config-airbnb-typescript\": \"^17.1.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-plugin-eslint-comments\": \"^3.2.0\",\n    \"eslint-plugin-import\": \"^2.29.1\",\n    \"eslint-plugin-no-relative-import-paths\": \"^1.5.3\",\n    \"eslint-plugin-prettier\": \"^5.1.3\",\n    \"eslint-plugin-promise\": \"^6.1.1\",\n    \"prettier\": \"^3.2.5\",\n    \"tsup\": \"^8.0.2\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"keywords\": [\n    \"crypto\",\n    \"cryptocurrency\",\n    \"fiat\",\n    \"on\",\n    \"off\",\n    \"ramp\",\n    \"sdk\",\n    \"react-native\"\n  ]\n}\n","import Pusher from 'pusher-js/react-native';\nimport { TransakConfig, OnTransakEvent } from 'Types/sdk-config.types';\nimport { EventTypes } from 'Types/events.types';\nimport { Order } from 'Types/order.types';\n\nfunction eventListener({ apiKey, partnerOrderId }: TransakConfig, cb: OnTransakEvent) {\n  const pusher = new Pusher('1d9ffac87de599c61283', { cluster: 'ap2' });\n  const channelName = `${apiKey}_${partnerOrderId}`;\n\n  pusher.subscribe(channelName);\n  pusher.bind_global((event: EventTypes | 'pusher:pong', data: Order) => {\n    if (event !== 'pusher:pong') {\n      cb(event, data);\n    }\n  });\n\n  return {\n    unbindListener: () => {\n      pusher.unsubscribe(channelName);\n      pusher.unbind_global();\n    },\n  };\n}\n\nexport { eventListener };\n"]}